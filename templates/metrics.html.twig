{% extends "base.html.twig" %}


{% block title %}Metrics{% endblock %}

{% block content %}

<h1> Report </h1>
Här presenteras texten för rapporten för kursmoment 6, phpmetrics och Scrutinizer CI.


<h1> Introduktion </h1>


<p>
    <b>Code Coverage</b> innebär i vilken andel av koden som är enhetstestad.
    Detta syftar till att minska andelen buggar i programmet. En hög code coverage är att föredra
    men det inte nödvändigtvis så att 100% är det enda godtagbara. Testbar kod innebär
    troligen också att koden är "snyggare" och lättare att sätta sig in i, därför är det
    eftersträvansvärt att uppnå så att koden är testbar och även testas och därmed har hög code coverage.
    En annan fördel är att om man gör förändringar av sin kod så kan man på ett snabbt sätt 
    säkerställa att funktionaliteten i programmet är bibehållen genom att testa sin kod.
</p>

<p> 
    <b>Complexity</b> kan delas in två delar, dels hur många rader kod som finns och dels Cyclomatic Complexity.
    Den första är ju ganska självbeskriande, hur många rader kod som en klass eller program innehåller.
    Det är eftersträvans värt att ha mindre mängd kod rader om programmet kan lösa samma uppgift.
    Dels så är det ju en fråga gällande resuresr, datorn CPU och minne, som gynnas av ett kortare program.
    Men det är också troligen så att det är lättare för en programmerare att förstå ett program och få en överblick
    om det är färre rader kod.
</p>

<p>
    Den andra delen av complexity är Cyclomatic Complexity, som innebär hur många programflödesstyrande satser det finns i 
    koden. Exempel på sådana är if-satser, loopar och funktionsanrop. Det kan också beskrivs som
    hur många gånger programmet kan ta olika riktningar/alternativ. Det är eftersträvansvärt att ha så låg
    cyclomatic complexity som möjligt. Detta är nog likt argumenten gällande rader kod. Det är dels
    en resursfråga men också en fråga gällande hur lätt koden är att begripa och debugga, där lägre cyclomatic complexity 
    är att föredra.
</p>

<p>
<b>Coupling</b> innebär i vilken grad som en klass är beroende utav andra klasser. Det är
eftersträvansvärt att uppnå en så låg grad av coupling som möjligt. Hög coupling skulle kunna
vara att om man ändrar något i en del av en klass så påverkar det en annan klass. Det finns därtill
två olika typer av coupling. Den ena är Afferent coupling som innebär hur många
klasser som påverka<b>s</b> av den egna klassen. Den andra är Efferent coupling vilket är tvärtom,
det vill säga hur många klasser som påverk<b>ar</b> den egna klassen.
</p>

<p>
<b>Cohesion</b> innebär i vilken grad klassen är sammanhängande och gör samma sak. Det är alltså inte 
eftersträvansvärt med kod inom samma klass som gör olika saker. Det är enklare att förstå kod 
som gör samma sak än klasser som är spretiga och göra olika saker. Det är också sannolikt att 
klasser med låg Cohesion ger upphov till sidoeffekter.

</p>




<h1>Phpmetrics </h1>


    <p>
        Gällande compleixty i min kod så har jag 1 188 rader kod där den största klassen game har 92 rader kod.
        Gällande cyclomatisk komplexitet så är det främst klassen game med komplexiteten 17. De andra klasserna
        är i genomsnitt 3,08 i cyclomatisk komplexitet. Så det är låga värden anser jag även om Game sticker ut.

    </p>

    <p>
        Gällande <b>coupling</b> i min kod, för klasserna kopplade kortleksuppgifterna så är klassen Card
        grunden, det vill säga själva kortet i kortpslet. Detta kort används ju av alla andra klasser som är inom
        det namespacet, därför har den 5 stycken Afferent coupling. För att exempelvis få fram värdet
        av ett kort så måste man använda card-klassens get-funktion. Om jag då skulle ändra get-funktionen
        för Card, eller ta bort den, så skulle det skapa stora problem för iprincip
        alla övriga klasser inom det namespacet. På det sättet så är alla övriga klasser beroende av
        Card, det finns en hög coupling till Card.
    </p>

    <p>
        Exempel på cohesion är kanske klassen Hand inom namespacet Card. I den klassen hanteras bara kort
        där den antingen delar ut, tar emot kort. Möjligen funktionaliteten att räkna kortens värde 
        är något som är lite utanför? Det är antaligen inte svart eller vitt vad som
        är hög Cohesion. Jag lyckas dock inte i PHPmetrics hitta värdet för coupling?
    </p>

    <p>
        Jag väljer att titta på mätvärder class vialoations
        Jag får sju stycken <b>validations</b>, vara 1 critical och 7 warnings, som rör tre klasser, game, cardcontroller
        och trainlibrarycontroller. Gällande game så är jag enligt tidigare inte förvånad och
        gällande cardcontroller så är det kanske ganska mycket kod i en och samma controllerklass. Gällande trainlibrarycontroller
        så flaggade jag även där i tidigare redovisningstext där jag övervägde att skapa en klass för kommunikation mellan controllers och vyn 
        genom en modell/klass som hanterar den funktionaliteten. Men jag valde att inte göra
        så då det ändå kändes som ganska lite kod i controllern. Men här i phpmetrics får jag utslag om "God object",
        som innebär att den sköter huvuddelen av all logik i programmet, vilket förvisso stämmer ganska bra.
        Men det känns "fånigt" på något sätt att göra det till en databasklass när det är relativt lite kod?
    </p>


    <p>
        Svagheter som finns i min kod enligt phpmetrics är att Game-klassen är för komplex och har för mycket kodrader.
        Vad den också genomgående ger nedslag på är att controllerna är komplexa samt svåra att underhålla. Dock håller
        de sig under 20 i komplexitet så man kan ju ändå fundera på om det verkligen är ett problem? Som tidigare nämnt så
        är TrainLibraryController problematisk då den är en "god objekt" då den hanterar många olika delar mot databasen,
        och det antar jag väl kommer från att CRUD just är olika typer av funktionalitet men att de ändå är mot samma databas
        och enligt mig som människa "inom samma scope". För det kanske också är det som är utamningen med testerna,
        och det är att de inte tittar kvalitativt analytiskt utan bara kvantitativt utifrån sina riktmärken. Hur som helst 
        så hade jag ju en dialog med MOS gällande denna Controller och vi kom fram till att den ändå var okej utformad.
    </p>



<h1>Scrutinizer</h1>


    <p>
        Jag får ganska låg Code Coverage enligt Scrutinizer, 15,8%. Det beror på att uppgifterna
        i tidigare kursmoment har varit att testa under namespacet Card och till viss del Dice
        samt att inte testa controllers. Så det är väl
        enligt scrutinizer bättre kodtäckning jag bör fixa till, exempelvis för Dice-klassen.
        Som jag nämnt i tidigare redovisningstext så i Card namespace och klassen Game så
        var det något lägre testcoverage, 63%, i relation till de andra i samma namespace. Som jag nämnde
        då i tidigare redovisningstext så var det kod som jag kände mig mer osäker på även
        när jag skrev den, vilket också gjorde att det belv svårt att gå tillbaka och testa den.
    </p>

    <p>
        Ett problem som jag finner vid analys med hjälp av Scrutinizer inspection är att det verkar som
        att många nedslag är kopplade till ramverket. Exempelvis när jag bläddrar runt så verkar typ 
        allt som har grading E vara kopplat mot ramverket? Det är ju nackdel för mig att försöka hitta 
        "mina" koddelar och vad som falerar med det. Där är därför lite svårt att tolka Scrutinizer när den ger 
        nedslag på så många filer som jag själv inte är bekant med. Det hade varit bra med en filterfunktion
        så att jag kunde avgräna för filerna som bara ligger under mappen Src. Då hade jag haft en bättre 
        överblick för de koddelarna som jag skapat.
    </p>

    <p>
        Gällande complexity så berättar Scrutinizer att min src/-mapp innehåller 537 rader kod.
        Så den tittar därmed inte på hela programmets kod. Den klassen med högst complexity,
        är i likhet med phpmetrics fall, Game. Den räknar fram att det är 27 i complexitet. Det skiljer sig från 
        phpMetrics som räknade fram det till 17. När jag själv räknar på komplexiteten får jag det till 16.
        Bland annat så gör jag antagandet att för satsen "$this->getSumArray(0)[0] < 17 or $this->getSumArray(0)[1] < 1"
        så räknas det som två komplexitet då det sker i två fall? Förklaringen till varför Scrutinizer
        får tio fler komplexitet än metrics kanske är för att Scrutinizer räknar varje metod som 1 komplexitet.
        Detta då det är 11 metoder, samtidigt som att Scrutinizer räknar "$this->getSumArray(0)[0] < 17 or $this->getSumArray(0)[1] < 1"
        som en komplexitet? Högst oklart... Det är dock så att Scrutinizer ändå betydersätter metoden med A, även 
        om den har högst komplexitet jämfört med de andra klasserna. Dock tror jag att gränsen är 20, så det kan vara
        förklaringen.
    </p>

    <p> Min Scrutnizer visar inga värden för coupling och cohesion</p>

    <p>
        Under issues finns det ett antal problem som Srutinizer har hittat, så som unused code,
        alltså kod som är skriven i programmet men inte används av något. I mitt program finns 
        det 603 stycken av dessa. Men de som jag hittar kopplat till min kod så finns det sju stycken.
        Exempelvis i klassen  src/Controller/CardController.php så har jag deklarerat en variabel som en instans
        till Die, och det beror på att jag varit slarvig när jag kopierat tidigare kod.
    </p>


    <p> När jag fortsätter titta under de rekommendationer som scrutinizer har så ser jag fältet "best practice",
    och jag ser även att några av mina klasser har liknande problem, det vill säga att jag inte har deklarerat 
    vissa medlemsvariabler i ett antal klasser. Det gälle i testsviterna vilket jag åtgärdat genom att
    deklarera medlemsvariabler i de klasserna, och det gällde samtliga testklasser.
    <p>



<h1>Förbättringar</h1>

<p> Jag minskade komplexiteten för Game genom att gå igenom den största metoden,
    evaluate() genom att se hur jag kunde minska antalet kontrollsatser.
    Det gjorde jag genom att $userBestScore skulle sättas utifrån det bästa värdet
    av de två olika summorna, det hade jag tidigare en ifelse-sats. Genom att
    först deklarera värdet enligt det högsta, och sen köra en if-sats som kollar om det högsta
    är över 21 för att sedan ändra till det lägre värdet så minskade jag antalet kontrollsatser.
    Jag tog även bort en nestlad if-sats. Enligt scrutinizer så hade game 27 i komplexitet innan
    men förändringen gjorde ändå inte att komplexiteten minskades, så jag är
    lite osäker kring hur Scrutinizer räknar komplexitet. Man kanske är det så
    att else-delen i en ifsats inte räknas som en ökad komplexitet.

    Enligt phpmetrics så gavs Game innan förändringarna komplexitet, 17, och lägst
    maintainability, 46.63. I phpmetrics så förändrades inte heller komplexiteten,
    men däremot sjönk maintainability lite, till 46,13. Så min förändring gjorde
    ingen skillnad eller till och med försämring.. Samtidigt vet jag inte hur jag ska göra
    game mindre komplex, hittar ingen annan del i koden som vore kandidat. Så detta blev ju ingen
    förbättring, men var ändå ett försök till förbättring?

</p>

<p>
    Jag gjorde förbättringen kring att ta bort unused code (förbättring med sju stycken åtgärder
    som står i några stycken upp samt la till medlemsvariabler för testerna. Scrutininzer gav nämligen
    rekommendation på att medlemsvariabler bör deklareras explecit. Antalet issues gällande deklarerade
    medlemsvariabler minskades med 4 stycken.  Det gav dock ingen förändring i det Scrutinizers övergripande poäng.

</p>

<p>
    Jag har ökat code coverage genom att göra enhetstester för DiceHand, DiceGraphic och Dice.
    Genom detta så har min Testcovarage ökat till 19%, från tidigare 15,8%. Jag har nu 81,82%
    respektive 88.89% kodtäckning på mina klasser inom namespacet Card/ respektive Dice/.
</p>


<h1>Diskussion</h1>
<p>
    Jag tror nog att det framåt kommer bli naturligt att jobba med kodkvalitet för min del. Det känns som att särskilt
    Scrutinizer gav tydliga och vettiga förslag på vad som kunde förbättras. Just nu känns det spontant
    lite svårt att hitta och få det som ett naturligt flöde, men i framtiden. Själva verktyget Scrutinizer var smidigt 
    att den tittar på min github och uppdaterar den och visar vad det gjorts för förändringar. Mycket bra.
</p>

<p>
    Det jag finner lite kneigt är cohesion och coupling i och med att som jag förstår det inom objektorientering så
    uppmuntras det att klasser är specialiserade och gör endast en sak. Exempelvis att korten är av klassen kort och sedan
    så finns det en klass som hanterar kortet, ex håller dom i en hand, delar ut, etc. Det gör ju automatiskt att det blir 
    högre cohesion, coupling och beroende mellan klasserna. Så att stirra sig blind på de värdena och tänka att man ska ha
    så lågt som möjligt tror jag inte är rätt, då är det bättre att försöka tänka utifrån vad varje klass har för syfte.
    För man får nog ändå tänka att scrutinizer och phpmetrics ändå är lite "dumma" och endast följer sina mätvärden. Att ett mätvärde 
    är högt måste inte nödvändgtvis innebära att koden är "dålig"
</p>

<p>
    Jag ser ju också att detta är likt på sätt och vis hur validatorer fungerar. Att det är en mekanism som är till för att 
    hjälpa programmeraren att skriva bättre kod så att det är lättare att gå tillbaka till koden om den är bra skriven, alternativt
    om man jobbar i ett team och flera ska vara inne i koden så är det ju bra om koden är lättläst och tydlig.
</p>

<p> 
    Det som jag upplever är lite tråkigt är väl kanske att jag gjorde en ansats att minska komplexiteten men att det ändå
    inte gav någon minskad komplexitet. Samtidigt så lyckades jag inte hitta några alternativa sätt att minska komplexiteten.
    SÅ då blir man ju nyfiken om jag har krånglat till det i onödan eller om det faktiskt inte går att göra det mindre komplext.
    Det ger ju faktiskt inte phpmetrics/scrutinizer svar på, de beskriver ju endast vilket värde det är och inte om det är det lägsta möjliga.
    Så jag tänker väl tillbaka på det exemplet som MOS visade på föreläsningen, att CIMAGE hade väldigt dåliga värden.
    Samtidgt kan det ju faktiskt vara så att det programmet har väldigt god kodstruktur och så vidare, men att mätvärdena
    inte tar hänsyn till att det är komplext program. Ett komplext program har ju antagligen högre komplexitet än ett enkelt program.
    Men det blir ju lite orättvist att mäta båda mot samma mått och sedan hårt dra att över 20 i komplexitet är dåligt, för det 
    beror ju som sagt på vad det är för uppgift som programmet ska lösa.. Det borde vara ett releativt mått anser jag istället för 
    hårddraget.
</p>





{% endblock %}