{% extends "base.html.twig" %}


{% block title %}Report{% endblock %}

{% block content %}

<h1> Report </h1>
Här presenteras redovisningstexter för kursens kmom.


<h1> KMOM01 </h1>

<p>Jag har tidigare läst en introduktionskurs i c++ 10,5 hp där objektorienterad programmering ingick
    jag har även läst kursen oopython vid tidigare kursperiod. Förra året läste jag oophp men kom
    bara till kmom02, så jag misslyckades med kursen. Men det är nya tag som gäller nu!
    <br><br>
    Gällande objektorienterat i php så är en klass en slags "mall" som sedan objekt instansieras från.
    En instans/objekt innehåller properties (som är som variabler som tillhör instansen).
    <br><br>
    Metoder, som är definerade i klassen överförs inte till själva instansen utan lagras i
    klassen och anropas genom den. Däremot om man skapar metoder till den specifika instansen, så lagras det i den specifika instansen.
    Detta uppfattar jag som en skillnad mot python där hela klassens properties och metoder kopierades till
    instansen.
    <br><br>
    Man bör inte ändra/läsa en instans properties direkt utan det bör gå genom getter och setters-metoder
    som kan på ett kontrollerat sätt ändra instansens properties, vilket blir som ett slags API.
    Genom inkapsling, dvs att sätta en properties som private, så kan man på ett "hårt" sätt hindra att
    properties ändras utan getters/setters. Det är en viss skillnad mot python där man satte ett underscore
    framför propertien för att indikera att den var private, men på ett "mjukt" sätt, dvs det gick
    ändå att ändra den utan en setter-metod.
    <br><br>
    Jag tycker att strukturen är mycket bättre än förra årets struktur. Dels bra att det är styrt
    att vi kör på ett ramverk. Det är också tydligare hur routern fungerar och jag känner att jag kan
    dra paraleller till hur vi arbetade med databaskursen och htmlphp, vilket jag hade svårare att förstå
    förra året. Jag gillar nog särskilt strukturen för base.html.twig och hur de olika blocken
    ersätts av home/report/about, det är en tydlig paralell till hur vi gjorde i htmlphp.
    <br><br>
    De delar inom PHP the right way som jag ögnade igenom och kändes intressanta var databaser, om vi
    kan jobba på ett än smidigare sätt än vad vi gjorde i databaskursen/htmlphp. Servers and deployment,
    vore intressant att veta hur man skulle kunna sätta upp en server lite mer självständigt, alltså
    att inte använda studentservern utan att använda exempelvis en raspberry pie eller något, dock kanske 
    utanför kursen scope. Sedan så tycker jag segementet om säkerhet vore intressant att djupdyka i,
    hur man ska hantera inkommande data och hur man ska kryptera. Det var ju något vi vidrörde i
    htmlphp samt också till viss del i python-kursen vilket jag tyckte ver intressant.
    <br><br>
    Mitt TIL för detta kursmoment var väl helheten, att det gick ganska lätt att greppa
    konceptet med routing och controllers.
</p>

<h1> KMOM02 </h1>

<p> Något jag uppskattar är när kurserna hänger ihop på ett eller annat sätt. Exempelvis i oopython
    går vi igenom websequencediagram och i läshanvisningar i detta kursmoment används sådana i läsmaterialet på
    https://symfony.com/doc/current/introduction/http_fundamentals.html . Nu användes den ju in ett väldigt enkelt och 
    lättsamt exempel. Men ändå bra. Det är en liten detalj men ändå nice tycker jag!
    <br><br>
    Arv innebär att en klass ärver från en annan klass, det blir en specialisering. I min kod så ser jag att jag kanske borde
    använt Hand som en klass och sedan kunde Deck varit en specialisering då de delar mycket av sin funktionalitet. I en child
    i ett arvförhållande kan man lägga till ny funktionalitet eller göra element mer "öppna", ex ändra private till public.
    Man kan dock inte göra det omvända, att göra element till private som tidigare var public. Detta är eftersom ett barn
    att ersätta en förälder i klassen och om man gjort det mer private så hade det inte gått att nå dessa för andra metoder 
    som tidigare nådde dom i public för föräldern.

    <br><br>
    För deck och hand så använder jag arv. För jag ser det som att både har en funktion att hålla kort 
    men att deck är en specialisering av hand med mer funktionalitet och metoder. Därav ärver deck-klassen från hand-klassen. 
    Jag kunde också ha löst detta genom ett trait som haft de gemensamma koddelarna och sedan "kopierats in" i vardera klass
    <br><br>

    Association innebär att det finns en relation mellan två klasser. I min kod finns exempel där player har en hand och hand 
    innehåller ett antal kort. Dessa två är två olika typer av relation. Den första, är composition, om player försvinner så kommer även
    handen att försvinna, handen kan inte "leva" utan player. Den andra, mellan hand och card är det Aggregation, där korten är skapade 
    utanför handen och sedan inlagda, de lever alltså utanför handen, och om handen skulle försvinna så finns korten kvar.

    <br><br>
    Interface innebär att ett antal metoder ska finnas i en klass. Det blir kanske som ett slags "omvänt API"? Att man kan specificera att 
    ett interface ska vara ett visst antal metoder och om en klass har implementerat detta så vet man att ett antal metoder ska finnas, exempelvis
    som en getmetod?

    <br><br>
    Jag tycker instruktionerna för uppgiften var lite väl sparsamma. Däremot så är videoföreläsningarna till dessa 
    väldigt bra. Jag tycker generellt att det verkar som ett bra format med korta videoklipp än långa föreläsningar.

    <br><br>
    Mitt TIL är väl att jag har blivit någorlunda van att använda git, det har jag haft stora problem med i 
    tidigare kurser av någon anledning. Men jag tycker videoserien Mikael gjorde för kmom01 i sin egen kanal (den på engelska)
    var väldigt bra och lätt att följa! Härligt!

</p>

<h1> KMOM03 </h1>

<p> </p>

<h1> KMOM04 </h1>

<p> </p>

<h1> KMOM05 </h1>

<p> </p>

<h1> KMOM06 </h1>

<p> </p>

<h1> KMOM10 </h1>

<p> </p>

{% endblock %}